summary(melb_auctions)
ggplot(melb_auctions, aes(x=factor(year), y=price)) +
geom_boxplot() +
facet_grid(property_type~suburb)
melb_auctions <- melb_auctions %>%
select(price, suburb, result, nbeds, property_type) %>%
filter(result != "SA")
library(caret)
set.seed(10)
indx <- createDataPartition(melb_auctions$suburb, list=FALSE)
train <- melb_auctions[indx,]
test <- melb_auctions[-indx,]
MSE <- function(model, data) {
pred <- predict(model, data)
e <- data$price - pred
mse <- sum(e^2)/length(e)
return(mse)
}
library(rpart)
train_rp <- rpart(price~suburb+result+nbeds+property_type,
data=train)
train.rp
train_rp
library(rpart.plot)
rpart.plot(train_rp)
train_glm <- glm(price~suburb*nbeds*property_type, data=train)
train_glm
summary(train_glm)$coefficients
MSE(train_glm, test)
train_glm
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=5)
library(randomForest)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=5)
train_sub <- train
train_sub$suburb <- factor(train_sub$suburb)
train_sub$result <- factor(train_sub$result)
train_sub$property_type <- factor(train_sub$property_type)
test_sub <- test
test_sub$suburb <- factor(test_sub$suburb)
test_sub$result <- factor(test_sub$result)
test_sub$property_type <- factor(test_sub$property_type)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=5)
train_rf
MSE(train_rf, test_sub)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=2)
train_rf
MSE(train_rf, test_sub)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=2, ntree=1000)
train_rf
MSE(train_rf, test_sub)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=2, ntree=10000)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE, mtry=2, ntree=10000)
train_rf
MSE(train_rf, test_sub)
pred1 <- predict(train_rp, test, type="vector")
pred2 <- predict(train_glm, test)
pred3 <- predict(train_rf, test_sub)
df <- data.frame(pred1, pred2, pred3)
p1 <- ggplot(df, aes(x=pred1, y=pred2)) +
geom_point() + theme(aspect.ratio=1) +
xlab("tree") + ylab("glm")
p2 <- ggplot(df, aes(x=pred1, y=pred3)) +
geom_point() + theme(aspect.ratio=1) +
xlab("tree") + ylab("forest")
p3 <- ggplot(df, aes(x=pred2, y=pred3)) +
geom_point() + theme(aspect.ratio=1) +
xlab("glm") + ylab("forest")
library(gridExtra)
grid.arrange(p1, p2, p3, ncol=3)
498*0.0049
51*8
75*8
20*8
mean(c(5, 20, -3, 3, 2))
sd(c(5, 20, -3, 3, 2))
sample(c("H","T"), 20, replace=T)
14.7-33
rexp(3)
nmle <- function(x, a, b) {
f <- prod(dgamma(x, a, b))
return(f)
}
nmle <- function(x, a) {
f <- prod(dexp(x, a))
return(f)
}
?rexp
x <- rexp(100, 2)
df <- data.frame(x=x, l=nlme(x, seq(0.1, 3, 0.1)))
df <- data.frame(x=x, l=nmle(x, seq(0.1, 3, 0.1)))
head(df)
library(tidyverse)
ggplot(df, aes(x=x, y=f)) + geom_line()
ggplot(df, aes(x=x, y=l)) + geom_line()
a <- seq(0.1, 3, 0.1)
l <- NULL
for (i in 1:length(a))
l<-c(l,nmle(x, a[i]))
l
df <- data.frame(x, a, l)
df <- data.frame(a, l)
ggplot(df, aes(x=a, y=l)) + geom_line()
a <- seq(0.1, 3.5, 0.05)
l <- NULL
for (i in 1:length(a))
l<-c(l,nmle(x, a[i]))
df <- data.frame(a, l)
ggplot(df, aes(x=a, y=l)) + geom_line()
ggplot(df, aes(x=a, y=l)) + geom_line() + xlab("lambda") + ylab("likelihood")
library(tidyverse)
melb_auctions <- read_csv("melb_auctions.csv")
melb_auctions <- melb_auctions %>%
select(price, suburb, result, nbeds, property_type) %>%
filter(result != "SA")
train_sub <- melb_auctions
train_sub$suburb <- factor(train_sub$suburb)
train_sub$result <- factor(train_sub$result)
train_sub$property_type <- factor(train_sub$property_type)
test_sub <- test
library(randomForest)
train_rf <- randomForest(price~suburb+result+nbeds+property_type,
data=train_sub, importance=TRUE)
train_rf
str(train_rf)
str(train_rf$forest)
str(train_rf$forest[[1]])
melb_auctions <- read_csv("melb_auctions.csv")
melb_auctions <- melb_auctions %>%
#select(price, suburb, result, nbeds, property_type) %>%
filter(result != "SA")
train_sub <- melb_auctions
train_sub$suburb <- factor(train_sub$suburb)
train_sub$result <- factor(train_sub$result)
train_sub$property_type <- factor(train_sub$property_type)
library(randomForest)
train_rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths,
data=train_sub, importance=TRUE)
train_sub$month <- factor(train_sub$month)
train_rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub, importance=TRUE)
train_rf
?getTree
train_rf$mse
sort(train_rf$mse)
which.min(train_rf$mse)
which.max(train_rf$mse)
t1 <- getTree(train_rf, 2)
t2 <- getTree(train_rf, 55)
plot(t1)
t1 <- getTree(train_rf, 2, labelVar = TRUE)
t2 <- getTree(train_rf, 55, labelVar = TRUE)
t1
library(rpart.plot)
rpart.plot(t1)
library(party)
install.packages("party")
library(party)
help(package="party")
train_crf <- cforest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub)
train_crf
train_crf$importance
importance(train_crf)
train_crf$vimp
varimp(train_crf)
plot.getTree(t1)
reprtree:::plot.getTree(t1)
install.packages("reprtree")
install_github('araastat/reprtree')
devtools::install_github('araastat/reprtree')
reprtree:::plot.getTree(t1)
reprtree:::plot.getTree(train_rf, 2)
prettytree(train_crf@ensemble[[2]], names(train_crf@data@get("input")))
?prettytree
plot(train_crf@ensemble[[2]])
plot(prettytree(train_crf@ensemble[[2]], names(train_crf@data@get("input"))))
pt <- prettytree(train_crf@ensemble[[2]], names(train_crf@data@get("input")))
nt <- new("BinaryTree")
nt@tree <- pt
nt@data <- cf@data
nt@data <- train_crf@data
nt@responses <- train_crf@responses
nt
plot(nt)
plot(nt, drop_terminal = TRUE)
plot(nt, terminal_panel = node_boxplot, drop_terminal = TRUE)
plot(nt, type="simple", terminal_panel = node_boxplot, drop_terminal = TRUE)
plot(nt, type="extended", terminal_panel = node_boxplot, drop_terminal = TRUE)
plot(nt, type="extended", drop_terminal = FALSE)
nt
pt
str(pt)
str(pt[[1]])
head(train_crf@responses)
?cforest
train_crf@data@get("input")
head(names(train_crf@data@get("input")))
?prettytree
library(caret)
set.seed(10)
indx <- createDataPartition(melb_auctions$suburb, list=FALSE)
train <- melb_auctions[indx,]
test <- melb_auctions[-indx,]
train_sub <- train
train_sub$suburb <- factor(train_sub$suburb)
train_sub$result <- factor(train_sub$result)
train_sub$property_type <- factor(train_sub$property_type)
train_sub$month <- factor(train_sub$month)
test_sub <- test
test_sub$suburb <- factor(test_sub$suburb)
test_sub$result <- factor(test_sub$result)
test_sub$property_type <- factor(test_sub$property_type)
MSE <- function(model, data) {
pred <- predict(model, data)
e <- data$price - pred
mse <- sum(e^2)/length(e)
return(mse)
}
ntree <- seq(1, 600, 10)
tr_err <- rep(100, length(ntree))
ts_err <- rep(100, length(ntree))
for (i in 1:length(ntree)) {
rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub)
tr_err[i] <- rf$mse[i]
pred <- predict(rf, test)
ts_err[i] <- MSE(test$price, pred)
}
test_sub$month <- factor(test_sub$month)
for (i in 1:length(ntree)) {
rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub)
tr_err[i] <- rf$mse[i]
pred <- predict(rf, test)
ts_err[i] <- MSE(test$price, pred)
}
for (i in 1:length(ntree)) {
rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub)
tr_err[i] <- rf$mse[i]
pred <- predict(rf, test_sub)
ts_err[i] <- MSE(test$price, pred)
}
train_sub <- train
train_sub$suburb <- factor(train_sub$suburb)
train_sub$result <- factor(train_sub$result)
train_sub$property_type <- factor(train_sub$property_type)
train_sub$month <- factor(train_sub$month)
test_sub <- test
test_sub$suburb <- factor(test_sub$suburb)
test_sub$result <- factor(test_sub$result)
test_sub$property_type <- factor(test_sub$property_type)
test_sub$month <- factor(test_sub$month)
train_rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub, importance=TRUE)
pred <- predict(train_rf, test_sub)
rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub, ntree=ntree[i])
tr_err[i] <- rf$mse[i]
pred <- predict(rf, test_sub)
ts_err[i] <- MSE(test_sub$price, pred)
head(pred)
e <- obs - pred
MSE <- function(obs, pred) {
e <- obs - pred
mse <- sum(e^2)/length(e)
return(mse)
}
MSE(test_sub$price, pred)
ntree <- seq(1, 600, 10)
tr_err <- rep(100, length(ntree))
ts_err <- rep(100, length(ntree))
for (i in 1:length(ntree)) {
rf <- randomForest(price~suburb+result+nbeds+property_type+
month+year+nvisits+rating+ncars+nbaths+land_size+house_size,
data=train_sub, ntree=ntree[i])
tr_err[i] <- rf$mse[i]
pred <- predict(rf, test_sub)
ts_err[i] <- MSE(test_sub$price, pred)
}
df <- data.frame(ntree, tr_err, ts_err) %>% gather(type, error, -ntree)
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point() + geom_smooth(se=FALSE) +
ylim(c(0, 0.35)) + scale_colour_brewer(palette="Dark2")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point() + geom_smooth(se=FALSE)
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point() + geom_smooth(se=FALSE) +
scale_colour_brewer(palette="Dark2")
109+65+22+3+1
65+44+9+4
0.01*0.6+0.001*0.4
0.01*0.6/0.0064
?glm
p <- seq(0, 0.5, 0.1)
l <- 0.6*p-0.2
df <- data.frame(p, l)
ggplot(df, aes(p, l)) + geom_point()
ggplot(df, aes(p, l)) + geom_line()
ggplot(df, aes(p, l)) + geom_line() + ylab("loss")
df <- data.frame(ntree, tr_err, ts_err) %>% gather(type, error, -ntree)
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer(palette="Dark2")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_linetype("error")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error") + theme(legend.position="bottom")
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error") + theme(legend.position="bottom", legend.key.width = 3)
?legend.key.width
?theme
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error") + theme(legend.position="bottom", legend.key.size = 3)
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error") + theme(legend.position="bottom", legend.key.size = unit(2, "cm"))
ggplot(df, aes(x=ntree, y=error, colour=type)) +
geom_point(aes(shape=type)) + geom_smooth(aes(linetype=type), se=FALSE) +
scale_colour_brewer("error", palette="Dark2") +
scale_shape("error") +
scale_linetype("error") + theme(legend.position="bottom", legend.key.width = unit(2, "cm"))
library(DArq)
help(package="DArq")
library(quantreg);
library(DArq);
## single censoring case
Z1=rnorm(200);
Z2=rnorm(200);
varep=rt(200,3);
delta=rep(0,200);
y=2*Z1+2*Z2+varep;
Lc=as.numeric(quantile(y, 0.3)); # the left censoring bound
delta[y<=Lc]=1;
y[y<=Lc]=Lc;
L=numeric(200);
U=numeric(200)+1;
L[delta==1]=-Inf; U[delta==1]=Lc;
dat=data.frame(y, Z1, Z2, L, U, delta);
names(dat)=c("y", "Z1", "Z2", "L", "U", "delta");
y=dat$y;
x=as.matrix(dat[,!names(dat) %in% c("y","delta","L","U")]);
L=dat$L;
U=dat$U;
delta=dat$delta;
res.DArq.single=DArq(y, x, delta, L, U, taus=c(0.1, 0.3, 0.5, 0.7, 0.9),iter=50);
## double censoring case
Z1=runif(200);
Z2=runif(200,1,3);
varep=rnorm(200);
delta=rep(0,200);
y=1+6*Z1+3*Z2+(Z1+0.5*Z2)*varep;
Lc=as.numeric(quantile(y, 0.2)); # the left censoring time
Rc=as.numeric(quantile(y, 0.9)); # the right censoring time
delta[y<=Lc]=1;
delta[y>=Rc]=2;
y[y<=Lc]=Lc;
y[y>=Rc]=Rc;
L=numeric(200);
U=numeric(200)+1;
L[delta==1]=-Inf; U[delta==1]=Lc;
L[delta==2]=Rc; U[delta==2]=Inf;
dat=data.frame(y, Z1, Z2, L, U, delta);
names(dat)=c("y", "Z1", "Z2", "L", "U", "delta");
y=dat$y;
x=as.matrix(dat[,!names(dat) %in% c("y","delta","L","U")]);
L=dat$L;
U=dat$U;
delta=dat$delta;
res.DArq.double=DArq(y, x, delta, L, U, taus=c(0.1, 0.3, 0.5, 0.7, 0.9), iter=100, tol=0.01);
res.DArq.double
?gbm
library("tidyverse")
library("forcats")
load("pisa_au.rda")
pisa_au <- pisa_au %>%
mutate(science = (PV1SCIE+PV2SCIE+PV3SCIE+PV4SCIE+
PV5SCIE+PV6SCIE+PV7SCIE+PV8SCIE+
PV9SCIE+PV10SCIE)/10)
pisa_au <- pisa_au %>%
select(science, ST004D01T, OUTHOURS, ANXTEST, EMOSUPP, PARED, JOYSCIE, WEALTH, ST013Q01TA, ST012Q01TA, SENWT)
pisa_au <- pisa_au %>%
select(science, ST004D01T, OUTHOURS, ANXTEST, EMOSUPP, PARED, JOYSCIE, WEALTH, ST013Q01TA, ST012Q01TA, SENWT)
pisa_au <- pisa_au %>% select(-EMOSUPP, -OUTHOURS)
aus_nomiss <- pisa_au %>% #filter(!is.na(OUTHOURS)) %>%
filter(!is.na(ANXTEST)) %>% filter(!is.na(PARED)) %>%
filter(!is.na(JOYSCIE)) %>% filter(!is.na(WEALTH)) %>%
filter(!is.na(ST013Q01TA)) %>% filter(!is.na(ST012Q01TA))
aus_nomiss <- aus_nomiss %>%
mutate(ST004D01T=factor(ST004D01T, levels=c(1,2), labels=c("f", "m")))
ggplot(aus_nomiss, aes(x=JOYSCIE, y=science, colour=ST004D01T)) +
geom_smooth(method="lm") +
scale_colour_brewer(palette="Dark2")
ggplot(aus_nomiss, aes(x=JOYSCIE, y=science,
colour=ST004D01T, linetype=ST004D01T)) +
geom_smooth(method="lm") +
scale_colour_brewer(palette="Dark2")
aus_glm <- glm(science~ST004D01T*JOYSCIE+ST004D01T*ANXTEST+
PARED+WEALTH+ST013Q01TA+ST012Q01TA,
data=aus_nomiss, weights=SENWT)
summary(aus_glm)$coefficients
library(xtable)
xtable(summary(aus_glm)$coefficients)
summary(aus_glm)
aus_glm2 <- glm(science~ST004D01T+JOYSCIE+ANXTEST+
PARED+WEALTH+ST013Q01TA+ST012Q01TA,
data=aus_nomiss, weights=SENWT)
summary(aus_glm2)
29170010-29085855
library(broom)
aus_glm_augment <- augment(aus_glm)
ggplot(aus_glm_augment, aes(x=.hat, y=.cooksd)) + geom_point()
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) + geom_point() +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1)
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) + geom_point() +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1) +
xlab("sample quantiles") + ylab("theoretical quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) + geom_point(alpha=0.5) +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1) +
xlab("sample quantiles") + ylab("theoretical quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1) +
geom_point(alpha=0.2) +
xlab("sample quantiles") + ylab("theoretical quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1) +
geom_point(alpha=0.02) +
xlab("sample quantiles") + ylab("theoretical quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(aus_glm_augment, aes(x=.resid)) + geom_histogram()
n <- nrow(aus_nomiss)
aus_glm_augment$q = qnorm(c(1 - 0.5^(1/n), (2:(n-1) - 0.3175) /
(n + 0.365),0.5^(1/n)), 2, 0.5)
p2 <- ggplot(aus_glm_augment, aes(x=sort(.resid), y=q)) +
geom_smooth(method="lm", se=FALSE) + theme(aspect.ratio=1) +
geom_point(alpha=0.05) +
xlab("sample quantiles") + ylab("theoretical quantiles")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
6+4+12+12+12+9+21+8+5
6+4+12+12+16+9+21+8+6
6+4+12+15+16+9+21+8+6
6+4+15+15+16+9+21+8+6
